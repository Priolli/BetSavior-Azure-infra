{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "1600676566878036282"
    }
  },
  "parameters": {
    "project": {
      "type": "string",
      "defaultValue": "bsrv",
      "metadata": {
        "description": "Project short name"
      }
    },
    "env": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Environment: dev | stage | prod"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region"
      }
    },
    "cosmosMaxRu": {
      "type": "int",
      "defaultValue": 1000,
      "minValue": 400,
      "metadata": {
        "description": "Cosmos DB autoscale max RU/s per container"
      }
    },
    "deployAcs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Azure Communication Services (may be unavailable on some subscriptions)"
      }
    }
  },
  "variables": {
    "namePrefix": "[format('{0}-{1}', parameters('project'), parameters('env'))]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}-kv', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[tenant().tenantId]",
        "enableRbacAuthorization": true,
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "softDeleteRetentionInDays": 90,
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[toLower(replace(format('{0}st', variables('namePrefix')), '-', ''))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-aisearch', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "basic"
      },
      "properties": {
        "semanticSearch": "free"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('{0}-appi', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-12-01",
      "name": "[format('{0}-plan', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[format('{0}-func', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', variables('namePrefix')))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(format('{0}st', variables('namePrefix')), '-', ''))), '2023-05-01').keys[0].value]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', format('{0}-appi', variables('namePrefix'))), '2020-02-02').InstrumentationKey]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('{0}-appi', variables('namePrefix')))]",
        "[resourceId('Microsoft.Web/serverfarms', format('{0}-plan', variables('namePrefix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(format('{0}st', variables('namePrefix')), '-', '')))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}-cosmos', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "publicNetworkAccess": "Enabled",
        "minimalTlsVersion": "Tls12"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/betsavior', format('{0}-cosmos', variables('namePrefix')))]",
      "properties": {
        "resource": {
          "id": "betsavior"
        },
        "options": {}
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos', variables('namePrefix')))]"
      ]
    },
    {
      "condition": "[parameters('deployAcs')]",
      "type": "Microsoft.Communication/communicationServices",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}-acs', variables('namePrefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "dataLocation": "Europe"
      }
    },
    {
      "copy": {
        "name": "containers",
        "count": "[length(createArray('users', 'sessions', 'goals', 'journals', 'finance_events', 'risk_states'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('container-{0}', createArray('users', 'sessions', 'goals', 'journals', 'finance_events', 'risk_states')[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[format('{0}-cosmos', variables('namePrefix'))]"
          },
          "databaseName": {
            "value": "betsavior"
          },
          "containerName": {
            "value": "[createArray('users', 'sessions', 'goals', 'journals', 'finance_events', 'risk_states')[copyIndex()]]"
          },
          "partitionKey": {
            "value": "/userId"
          },
          "maxRu": {
            "value": "[parameters('cosmosMaxRu')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9482670900164780585"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "partitionKey": {
              "type": "string",
              "defaultValue": "/userId"
            },
            "maxRu": {
              "type": "int",
              "defaultValue": 1000,
              "minValue": 400
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1], format('{0}', parameters('containerName')))]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerName')]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('partitionKey')]"
                    ],
                    "kind": "Hash",
                    "version": 2
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent"
                  }
                },
                "options": {
                  "autoscaleSettings": {
                    "maxThroughput": "[parameters('maxRu')]"
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos', variables('namePrefix')))]"
      ]
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[format('{0}-kv', variables('namePrefix'))]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[toLower(replace(format('{0}st', variables('namePrefix')), '-', ''))]"
    },
    "searchServiceName": {
      "type": "string",
      "value": "[format('{0}-aisearch', variables('namePrefix'))]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[format('{0}-func', variables('namePrefix'))]"
    },
    "cosmosAccountName": {
      "type": "string",
      "value": "[format('{0}-cosmos', variables('namePrefix'))]"
    },
    "appInsightsName": {
      "type": "string",
      "value": "[format('{0}-appi', variables('namePrefix'))]"
    },
    "acsName": {
      "type": "string",
      "value": "[if(parameters('deployAcs'), format('{0}-acs', variables('namePrefix')), 'not-deployed')]"
    }
  }
}